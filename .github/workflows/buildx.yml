name: buildx

on:
  push:
    branches:
      - master
      - features/*
      - releases/*
      - development
    tags:
      - v*

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: checkout repo
        uses: actions/checkout@v2

      - name: setup docker buildx
        if: success()
        id: buildx
        uses: crazy-max/ghaction-docker-buildx@v3
        with:
          qemu-version: latest
          buildx-version: latest

      - name: setup docker cache
        if: success()
        id: cache
        uses: actions/cache@v2
        with:
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          path: /tmp/buildx-cache
          restore-keys: ${{ runner.os }}-buildx-

      - name: configure build
        if: success()
        id: config
        env:
          GITHUB_REPO: ${{ github.repository }}
          DOCKERHUB_USER: ${{ secrets.DOCKERHUB_USERNAME }}
        run: |
          if [[ $GITHUB_REF == refs/tags/v* ]]; then
            # Tagged release
            echo ::set-output name=version::${GITHUB_REF#refs/tags/}
          elif [[ $GITHUB_REF == refs/heads/master ]]; then
            # Master branch (next step is tag for release)
            echo ::set-output name=version::latest
          elif [[ $GITHUB_REF == refs/heads/releases/* ]]; then
            # Release candidate branch (next step is merge into master)
            echo ::set-output name=version::${GITHUB_REF#refs/heads/releases/}-rc
          elif [[ $GITHUB_REF == refs/heads/development ]]; then
            # Development branch (next step is fork or merge into release candidate branch)
            echo ::set-output name=version::edge
          elif [[ $GITHUB_REF == refs/heads/features/* ]]; then
            # Feature branch (next step is to merge into development branch)
            echo ::set-output name=version::edge-${GITHUB_REF#refs/heads/features/}
          else
            exit 1
          fi

          # Temporary workaround https://github.com/moby/moby/issues/41017
          #cho ::set-output name=docker_platforms::linux/amd64,linux/arm/v6,linux/arm64
          echo ::set-output name=docker_platforms::linux/arm/v6
          echo ::set-output name=docker_image::${DOCKERHUB_USER}/${GITHUB_REPO##*/}
          echo ::set-output name=project_name::${GITHUB_REPO##*/}
          echo ::set-output name=build_date::$(date -u +'%Y-%m-%dT%H:%M:%SZ')
          echo ::set-output name=gitref::${GITHUB_SHA::8}

      - name: build docker image
        if: success()
        run: |
          docker buildx build \
            --output      "type=image,push=false" \
            --cache-to    "type=local,dest=/tmp/buildx-cache" \
            --cache-from  "type=local,src=/tmp/buildx-cache" \
            --platform    "${{ steps.config.outputs.docker_platforms }}" \
            --tag         "${{ steps.config.outputs.docker_image }}:${{ steps.config.outputs.version }}" \
            .

  publish:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: docker hub login
        if: success()
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_PASSwORD }}
        run: |
          echo "${DOCKERHUB_PASSWORD}" | docker login --username "${DOCKERHUB_USERNAME}" --password-stdin

      - name: push docker image
        if: success()
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
        run: |
          docker buildx build \
            --output      "type=image,push=true" \
            --cache-from  "type=local,src=/tmp/buildx-cache" \
            --platform    "${{ steps.config.outputs.docker_platforms }}" \
            --tag         "${{ steps.config.outputs.docker_image }}:${{ steps.config.outputs.version }}" \
            --label       "org.opencontainers.image.created=${{ steps.config.outputs.build_date }}" \
            --label       "org.opencontainers.image.revision=${{ steps.config.outputs.build.gitref }}"
            .

      # - name: dockerhub description
      #   uses: peter-evans/dockerhub-description@v2.1.0
      #   env:
      #     DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      #     DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}
      #     DOCKERHUB_REPOSITORY: ${{ secrets.DOCKERHUB_REPOSITORY }}

      - name: configure release info
        if: success()
        id: release
        run: |
          echo ::set-output name=pihole_core_version=$(cat Dockerfile | grep PIHOLE_CORE_VERSION= | head -n1 | grep -o 'v.*')
          echo ::set-output name=pihole_ftl_version=$(cat Dockerfile | grep PIHOLE_FTL_VERSION= | head -n1 | grep -o 'v.*')
          echo ::set-output name=pihole_web_version=$(cat Dockerfile | grep PIHOLE_WEB_VERSION= | head -n1 | grep -o 'v.*')

      - name: create release
        uses: actions/create-release@v1
        if: success() && github.event_name == 'tag'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |
            Core **[${{ steps.config.output.pihole_core_version }}](https://github.com/pi-hole/pi-hole/releases/tag/${{ steps.config.output.pihole_core_version }})**
            FTLDNS **[${{ steps.config.output.pihole_ftl_version }}](https://github.com/pi-hole/FTL/releases/tag/${{ steps.config.output.pihole_ftl_version }})**
            Web interface **[${{ steps.config.output.pihole_web_version }}](https://github.com/pi-hole/AdminLTE/releases/tag/${{ steps.config.output.pihole_web_version }})**
          draft: true
          prerelease: false

      - name: cleanup
        run: |
          rm -f ${HOME}/.docker/config.json
